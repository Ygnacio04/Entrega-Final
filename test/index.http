@baseUrl = http://localhost:3000/api
@baseUrlRoot = http://localhost:3000
@token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODI1Y2NjOWVjYjczZjliOTdlYTM2MDQiLCJyb2xlIjoidXNlciIsImVtYWlsIjoiaTgxMGFnMDRAZ21haWwuY29tIiwiaWF0IjoxNzQ3MzA5ODE2LCJleHAiOjE3NDczOTYyMTZ9.E70HpM63Sg_pTn_wOQLiT63bKuBeFwc5mLOjwbafxk8
@clientId = 6825cc8eecb73f9b97ea35fd
@projectId = 682336c6b26d396f489e667c
@deliveryNoteId = 68233e871151a43add53faf8

###############################################
#            AUTENTICACIÓN DE USUARIOS       #
###############################################

### 1. Registro de usuario
POST {{baseUrl}}/user/register
Content-Type: application/json

{
  "firstName": "Ignacio",
  "lastName": "Arregui",
  "email": "i810ag04@gmail.com",
  "password": "Password123"
}

### 2. Verificación de email (tras recibir código)
POST {{baseUrl}}/user/verify-email
Content-Type: application/json

{
  "email": "i810ag04@gmail.com",
  "verificationCode": "348553"
}

### 3. Login de usuario
# Ejecutar este request para obtener el token que se usará en el resto de requests
POST {{baseUrl}}/user/login
Content-Type: application/json

{
  "email": "i810ag04@gmail.com",
  "password": "Password123"
}

### 4. Obtener datos del usuario actual
GET {{baseUrl}}/user/me
Authorization: Bearer {{token}}

### 5. Actualizar datos de usuario (onboarding)
PUT {{baseUrl}}/user/onboarding
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "firstName": "Juan Carlos",
  "lastName": "Pérez García",
  "company": {
    "name": "Mi Empresa SL",
    "cif": "B12345678",
    "address": {
      "street": "Calle Principal",
      "number": 123,
      "postal": 28001,
      "city": "Madrid"
    }
  }
}

### 6. Solicitar recuperación de contraseña
POST {{baseUrl}}/user/forgot-password
Content-Type: application/json

{
  "email": "i810ag04@gmail.com"
}

### 7. Restablecer contraseña
POST {{baseUrl}}/user/reset-password
Content-Type: application/json

{
  "token": "629492",
  "newPassword": "12345678"
}

### 8. Subir logo de perfil
PATCH {{baseUrl}}/user/logo
Authorization: Bearer {{token}}
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="image"; filename="logo.png"
Content-Type: image/png

< ./logo.png
------WebKitFormBoundary7MA4YWxkTrZu0gW--

###############################################
#             GESTIÓN DE INVITACIONES        #
###############################################

@invitationId = 682328628e9ababa65944b2a
@invitatorToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2ODIzMjgzYThlOWFiYWJhNjU5NDRiMjMiLCJyb2xlIjoidXNlciIsImVtYWlsIjoiaTIwYWcwNEBnbWFpbC5jb20iLCJpYXQiOjE3NDcxMzQ1NTAsImV4cCI6MTc0NzIyMDk1MH0.kK4uMWIDeAD-HgeIMe7IZIaYPmWoHhLm3CZ90t6zfVU

### 9. Registro de un segundo usuario para invitaciones
POST {{baseUrl}}/user/register
Content-Type: application/json

{
  "firstName": "Second",
  "lastName": "User",
  "email": "i20ag04@gmail.com",
  "password": "Password123"
}

### 9.5. Verificación de email (tras recibir código)
POST {{baseUrl}}/user/verify-email
Content-Type: application/json

{
  "email": "i20ag04@gmail.com",
  "verificationCode": "173603"
}

### 9.5. Login de usuario
POST {{baseUrl}}/user/login
Content-Type: application/json

{
  "email": "i20ag04@gmail.com",
  "password": "Password123"
}

### 10. Enviar invitación a un usuario
POST {{baseUrl}}/user/invitations/send
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "email": "i20ag04@gmail.com",
  "role": "user"
}

### 11. Obtener invitaciones recibidas
GET {{baseUrl}}/user/invitations/received
Authorization: Bearer {{invitatorToken}}

### 12. Obtener invitaciones enviadas
GET {{baseUrl}}/user/invitations/sent
Authorization: Bearer {{token}}

### 13. Aceptar una invitación
PUT {{baseUrl}}/user/invitations/accept/{{invitationId}}
Authorization: Bearer {{invitatorToken}}

### 14. Rechazar una invitación
PUT {{baseUrl}}/user/invitations/reject/{{invitationId}}
Authorization: Bearer {{invitatorToken}}

### 15. Cancelar una invitación enviada
DELETE {{baseUrl}}/user/invitations/cancel/{{invitationId}}
Authorization: Bearer {{token}}

###############################################
#             GESTIÓN DE CLIENTES            #
###############################################

### 16. Crear un nuevo cliente
POST {{baseUrl}}/client
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Empresa Cliente S.L.",
  "nif": "B87654321",
  "address": {
    "street": "Calle Comercial",
    "number": 42,
    "postal": 28002,
    "city": "Madrid"
  },
  "email": "contacto@empresa-cliente.com",
  "phone": "912345678"
}

### 17. Obtener todos los clientes
GET {{baseUrl}}/client
Authorization: Bearer {{token}}

### 18. Obtener un cliente específico
GET {{baseUrl}}/client/{{clientId}}
Authorization: Bearer {{token}}

### 19. Actualizar un cliente
PUT {{baseUrl}}/client/{{clientId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Empresa Cliente Actualizada S.L.",
  "email": "nuevo.contacto@empresa-cliente.com",
  "phone": "913456789"
}

### 20. Actualización parcial de cliente
PATCH {{baseUrl}}/client/{{clientId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "phone": "914567890"
}

### 21. Archivar un cliente (soft delete)
DELETE {{baseUrl}}/client/{{clientId}}
Authorization: Bearer {{token}}

### 22. Obtener clientes archivados
GET {{baseUrl}}/client/archived
Authorization: Bearer {{token}}

### 23. Restaurar un cliente archivado
PUT {{baseUrl}}/client/restore/{{clientId}}
Authorization: Bearer {{token}}

### 24. Eliminar permanentemente un cliente (hard delete)
DELETE {{baseUrl}}/client/{{clientId}}?hard=true
Authorization: Bearer {{token}}

###############################################
#             GESTIÓN DE PROYECTOS           #
###############################################

### 25. Crear un nuevo proyecto
POST {{baseUrl}}/project
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Desarrollo Web Corporativo",
  "description": "Creación de sitio web responsive con área de clientes",
  "client": "{{clientId}}",
  "startDate": "2023-05-01T00:00:00.000Z",
  "status": "in-progress"
}

### 26. Obtener todos los proyectos
GET {{baseUrl}}/project
Authorization: Bearer {{token}}

### 27. Filtrar proyectos por cliente
GET {{baseUrl}}/project?clientId={{clientId}}
Authorization: Bearer {{token}}

### 28. Obtener un proyecto específico
GET {{baseUrl}}/project/{{projectId}}
Authorization: Bearer {{token}}

### 29. Actualizar un proyecto
PUT {{baseUrl}}/project/{{projectId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Desarrollo Web Corporativo 2.0",
  "description": "Creación de sitio web responsive con área de clientes y blog",
  "status": "completed",
  "endDate": "2023-07-15T00:00:00.000Z",
  "client": "{{clientId}}"
}

### 30. Archivar un proyecto (soft delete)
DELETE {{baseUrl}}/project/{{projectId}}
Authorization: Bearer {{token}}

### 31. Obtener proyectos archivados
GET {{baseUrl}}/project/archived
Authorization: Bearer {{token}}

### 32. Restaurar un proyecto archivado
PUT {{baseUrl}}/project/restore/{{projectId}}
Authorization: Bearer {{token}}

### 33. Eliminar permanentemente un proyecto (hard delete)
DELETE {{baseUrl}}/project/{{projectId}}?hard=true
Authorization: Bearer {{token}}

###############################################
#             GESTIÓN DE ALBARANES           #
###############################################

### 34. Crear un nuevo albarán
POST {{baseUrl}}/deliverynote
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "project": "{{projectId}}",
  "date": "2023-06-15T00:00:00.000Z",
  "workedHours": [
    {
      "person": "Juan Pérez",
      "hours": 8,
      "date": "2023-06-15T09:00:00.000Z",
      "description": "Desarrollo frontend",
      "hourlyRate": 25
    },
    {
      "person": "Ana García",
      "hours": 6,
      "date": "2023-06-15T10:00:00.000Z",
      "description": "Diseño UX/UI",
      "hourlyRate": 30
    }
  ],
  "materials": [
    {
      "name": "Licencia de software",
      "quantity": 1,
      "price": 150,
      "description": "Licencia anual"
    },
    {
      "name": "Dominio web",
      "quantity": 1,
      "price": 15,
      "description": "Renovación anual"
    }
  ],
  "observations": "Entrega parcial del proyecto, pendiente de aprobación"
}

### 35. Obtener todos los albaranes
GET {{baseUrl}}/deliverynote
Authorization: Bearer {{token}}

### 36. Filtrar albaranes por proyecto
GET {{baseUrl}}/deliverynote?projectId={{projectId}}
Authorization: Bearer {{token}}

### 37. Filtrar albaranes por cliente
GET {{baseUrl}}/deliverynote?clientId={{clientId}}
Authorization: Bearer {{token}}

### 38. Filtrar albaranes por estado pending
GET {{baseUrl}}/deliverynote?status=pending
Authorization: Bearer {{token}}

### 38. Estado draft
GET {{baseUrl}}/deliverynote?status=draft
Authorization: Bearer {{token}}

### 38. Estado signed
GET {{baseUrl}}/deliverynote?status=signed
Authorization: Bearer {{token}}

### 38. Estado cancelled
GET {{baseUrl}}/deliverynote?status=cancelled
Authorization: Bearer {{token}}

### 39. Obtener un albarán específico
GET {{baseUrl}}/deliverynote/{{deliveryNoteId}}
Authorization: Bearer {{token}}

### 40. Actualizar un albarán
PUT {{baseUrl}}/deliverynote/{{deliveryNoteId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "project": "{{projectId}}",
  "observations": "Entrega parcial del proyecto, aprobada por el cliente",
  "status": "pending",
  "workedHours": [
    {
      "person": "Juan Pérez",
      "hours": 10,
      "date": "2023-06-15T09:00:00.000Z",
      "description": "Desarrollo frontend y backend",
      "hourlyRate": 25
    }
  ]
}

### 41. Obtener PDF de un albarán firmado
GET {{baseUrl}}/deliverynote/pdf/{{deliveryNoteId}}?format=json
Authorization: Bearer {{token}}

### 42. Firmar un albarán
POST {{baseUrl}}/deliverynote/sign/{{deliveryNoteId}}
Authorization: Bearer {{token}}
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="signature"; filename="firma.png"
Content-Type: image/png

< ./firma.png
------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="signer"

Ignacio Arregui
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### 43. Archivar un albarán (soft delete)
DELETE {{baseUrl}}/deliverynote/{{deliveryNoteId}}
Authorization: Bearer {{token}}

### 43.33. Obtener albaranes archivados
GET {{baseUrl}}/deliverynote/archived
Authorization: Bearer {{token}}

### 43.66. Restaurar un albarán archivado
PUT {{baseUrl}}/deliverynote/restore/{{deliveryNoteId}}
Authorization: Bearer {{token}}

### 44. Eliminar permanentemente un albarán (hard delete)
DELETE {{baseUrl}}/deliverynote/{{deliveryNoteId}}?hard=true
Authorization: Bearer {{token}}

###############################################
#             OTROS ENDPOINTS                #
###############################################

### 45. Documentación Swagger
GET {{baseUrl}}-docs
#Documentación Swagger en el navegador

### 46. Estado de la API
GET {{baseUrlRoot}}/
#Quitar el /api del baseUrl => localhost:3000/api
# Este endpoint muestra si la API está funcionando correctamente

### 47. Test de error para Slack
GET {{baseUrlRoot}}/test-slack-error
Authorization: Bearer {{token}}
# Este endpoint fuerza un error para probar la notificación a Slack

###############################################
#             GESTIÓN DE CUENTA USUARIO      #
###############################################

### 48. Eliminar usuario (soft delete)
DELETE {{baseUrl}}/user/delete
Authorization: Bearer {{token}}

### 49. Eliminar usuario permanentemente (hard delete)
DELETE {{baseUrl}}/user/delete?soft=false
Authorization: Bearer {{token}}